;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : DC Inverter
;Version : 0.1
;Date    : 3/15/2020
;Author  : Itachi
;Suppoted: Nguyen Duc Quyen
;Company : Viet Mold Machine
;Comments: DC Inverter with variant frequency using SPWM
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;
;#define F2  10000
;
;/* --------------------Global Variables-----------------*/
;unsigned int g_F1=70; 	//F1=50Hz
;unsigned int g_freq_load;
;
;/* ------------------Function Declaration---------------*/
;
;/* -----------Timer 1 Initialization---------------
; * Timer 1 is used to create PWM signal with fixed frequency
; * Detail configuration for Timer1:
; *				- ICR1 contains top value (control frequency)
; *				- OCA1 create positive pole
; *				- OCB1 create negative pole
; *				- Mode 14: Fast PWM go from 0 to value in ICR1
; *				- Clock value: 8000.000 kHz, Prescaler 1
; * Input: ui32freq Frequency of small PWM
; * Output: No
; * Affect global data:
; * Note: 1+Top (ICR1)=F_clk/F_pwm
; */
;void timer1Init(unsigned int freq);
;
;/* -----------Timer 1 Interrupt Service Routine---------------
; * Overflow interrupt timer1  handler
; * Upload new duty cycle value to
; * Enable/Disable PWM signal depend on the current "numpulse"
; * Input: No
; * Output: No
; */
;interrupt [TIM1_OVF] void timer1_ovf_isr(void);
;
;/* -----------Disable Compare Output A---------------
; * Disable output on CMP A (OCA1-PB1) and OC1A pin set as an input
; * Input: No
; * Output: No
; */
;void disableOutputA(void);
;
;/* -----------Enable Compare Output A---------------
; * Enable output on CMP A (OCA1-PB1) and set OC1A pin as an output
; * Input: No
; * Output: No
; */
;void enableOutputA(void);
;
;
;
;
;void main(void)
; 0000 004E {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 004F 	timer1Init(10000);
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0050 	#asm("sei") 						// Global enable interrupts
;PCODE: $00000010 VOL: 0
	sei
;PCODE: $00000011 VOL: 0
; 0000 0051 while (1)
;PCODE: $00000012 VOL: 0
; 0000 0052       {
; 0000 0053 
; 0000 0054       }
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0055 }
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;
;/* ------------------Function definition---------------*/
;
;
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 005B {
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 005C     unsigned int num_pulse;
; 0000 005D     static unsigned int num_int_called=0;
; 0000 005E //    unsigned int duty_load=g_freq_load*;   //duty cycle control
; 0000 005F     //Calculate number of pulses
; 0000 0060     num_pulse = F2/g_F1;
;PCODE: $0000001A VOL: 0
;	num_pulse -> R16,R17
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0061     num_int_called++;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0062     OCR1AH=399>> 8;   OCR1AL=399& 0xff;   //Load new compare value (control Duty A)
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0063     if(num_int_called<num_pulse/2)
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0064     {
; 0000 0065         enableOutputA();
;PCODE: $0000002C VOL: 0
; 0000 0066     }
; 0000 0067     else if ( (num_int_called>=num_pulse/2) && (num_int_called<num_pulse) )
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0068     {
; 0000 0069         disableOutputA();
;PCODE: $0000003B VOL: 0
; 0000 006A     }
; 0000 006B     else if (num_int_called>=num_pulse)
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 006C     {
; 0000 006D         num_int_called=0;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 006E     }
; 0000 006F 
; 0000 0070 }
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;
;void timer1Init(unsigned int freq)
; 0000 0073 {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0074 	//PB0,PB1 -> output
; 0000 0075 	DDRB|=0x06;
;PCODE: $0000004C VOL: 0
;	freq -> Y+0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0076 	//Disable interrupt timer1 before setting it up
; 0000 0077     TIMSK|=(0<<TICIE1)| (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0078     //Ignore compare match on B (half H only)
; 0000 0079     TCCR1A =(1<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 007A     //Setup timer -> mode 14
; 0000 007B     TCCR1A|=(1<<WGM11)|(0<<WGM10); TCCR1B|=(1<<WGM13) | (1<<WGM12);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 007C     //Prescaler 1
; 0000 007D     TCCR1B|=(0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 007E 	//Set up  PWM frequency
; 0000 007F 	g_freq_load=(8000000/freq)-1;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0080     ICR1H=(g_freq_load)>> 8;      ICR1L=(g_freq_load)& 0xff;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0081 	//Enable timmer1 interrupt
; 0000 0082     TIMSK|=(0<<TICIE1)| (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0083 }
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;
;void disableOutputA(void)
; 0000 0086 {
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0087     TCCR1A = TCCR1A&( ~0x80);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0088     DDRB&=~0x02;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0089 }
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;
;void enableOutputA(void)
; 0000 008C {
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 008D     TCCR1A = TCCR1A|0x80;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 008E     DDRB|=0x02;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 008F }
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
